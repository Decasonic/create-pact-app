{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/cpa/templates/react/src/App.js\";\n//basic React api imports\nimport React, { useState, useEffect } from 'react'; //semantic ui for styling\n\nimport { Segment, Input, Button } from 'semantic-ui-react'; //pact-lang-api for blockchain calls\n\nimport Pact from 'pact-lang-api'; //config file for blockchain calls\n\nimport { kadenaAPI } from './kadena-config.js';\n\nconst App = () => {\n  /*\n     REACT SETUP\n       we will make use of standard react apis\n       useState -> page state management (tx status, list of existing memories)\n      useEffect -> fetch existing memories on page load\n   */\n  //keep track of the blockchain call status\n  const [txStatus, setTxStatus] = useState('none'); //list of all memories\n\n  const [memories, setMemories] = useState([]);\n  useEffect(() => {\n    async function fetchMemories() {\n      await getMemories();\n    }\n\n    fetchMemories();\n    console.log(memories);\n  }, []);\n  /*\n     BLOCKCHAIN TRANSACTIONS\n       use pact-lang-api npm package to interact with Kadena blockchain networks\n        https://github.com/kadena-io/pact-lang-api\n       all transaction setup is ./kadena-config.js\n   */\n  //local call\n  //  reads from blockchain previously posted memories\n\n  const getMemories = async () => {\n    //calling get-all() function from smart contract\n    const res = await Pact.fetch.local({\n      pactCode: `(${kadenaAPI.contractAddress}.get-all)`,\n      //pact-lang-api function to construct transaction meta data\n      meta: Pact.lang.mkMeta(kadenaAPI.meta.sender, kadenaAPI.meta.chainId, kadenaAPI.meta.gasPrice, kadenaAPI.meta.gasLimit, kadenaAPI.meta.creationTime(), kadenaAPI.meta.ttl)\n    }, kadenaAPI.meta.host);\n    const all = res.result.data; //sorts memories by least recent\n\n    all.sort((a, b) => a[\"block-height\"].int - b[\"block-height\"].int);\n    setMemories(all);\n  }; //send call\n  //  writes memory blockchain\n  //  updates frontend depending on response\n  //THIS IS FOR GAS STATION\n  // FOR SIGNING API COMMENT OUT THIS AND UNCOMMENT FOLLOWING FUCNTION WITH SAME NAME\n  // const postMemory = async (user) => {\n  //     try {\n  //       //generates dummy keypair\n  //       //  using gas stations means the keys do not need to have funds\n  //       const kp = Pact.crypto.genKeyPair();\n  //       //sends JSON content to blockchain\n  //       const tx = await Pact.fetch.send(\n  //       {\n  //         networkId: kadenaAPI.meta.networkId,\n  //         //calling here() function from smart contract\n  //         //  writes text from 'user' variable to the memory wall\n  //         pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n  //         keyPairs: [\n  //           {\n  //             publicKey: kp.publicKey,\n  //             secretKey: kp.secretKey,\n  //             clist: [\n  //               //capability to use gas station\n  //               {\n  //                 name: `${kadenaAPI.gasStationAddress}.GAS_PAYER`,\n  //                 //args are irrelevant here just need to be the right type\n  //                 args: [\"hi\", {int: 1}, 1.0]\n  //               }\n  //             ]\n  //           }],\n  //         //pact-lang-api function to construct transaction meta data\n  //         meta: Pact.lang.mkMeta\n  //         (\n  //           kadenaAPI.meta.sender,\n  //           kadenaAPI.meta.chainId,\n  //           kadenaAPI.meta.gasPrice,\n  //           kadenaAPI.meta.gasLimit,\n  //           kadenaAPI.meta.creationTime(),\n  //           kadenaAPI.meta.ttl\n  //         )\n  //       }, kadenaAPI.meta.host);\n  //       //set state to wait for transaction response\n  //       txPending();\n  //       try {\n  //         //listens to response to transaction sent\n  //         //  note method will timeout in two minutes\n  //         //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n  //         let hello = await Pact.fetch.listen({\"listen\": tx.requestKeys[0]}, kadenaAPI.meta.host);\n  //         if (hello.result.status === \"success\"){\n  //           //set state for transaction success\n  //           txSuccess(hello.result.data, tx.requestKeys[0]);\n  //         } else {\n  //           //set state for transaction failure\n  //           txFailure(hello, tx.requestKeys[0]);\n  //         }\n  //       } catch(e){\n  //         console.log(e);\n  //         //set state for transaction listening timeout\n  //         txTimeout(tx.requestKeys[0]);\n  //       }\n  //     } catch(e){\n  //       console.log(e);\n  //       //set state for transaction construction error\n  //       txConstructionError();\n  //     }\n  // }\n  // //send call\n  // //  writes memory blockchain\n  // //  updates frontend depending on response\n  // // THIS IS FOR SIGNING API CONFIG\n  // const postMemory = async (user) => {\n  //     try {\n  //       //creates transaction to send to wallet\n  //       const toSign = {\n  //           pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n  //           caps: [],\n  //           gasLimit: kadenaAPI.meta.gasLimit,\n  //           chainId: kadenaAPI.meta.chainId,\n  //           ttl: kadenaAPI.meta.ttl,\n  //           envData: {}\n  //       }\n  //       //sends transaction to wallet to sign and awaits signed transaction\n  //       const signed = await Pact.wallet.sign(toSign)\n  //       console.log(signed)\n  //       //sends signed transaction to blockchain\n  //       const tx = await Pact.wallet.sendSigned(signed, kadenaAPI.meta.host)\n  //       //set html to wait for transaction response\n  //       txPending();\n  //       try {\n  //         //listens to response to transaction sent\n  //         //  note method will timeout in two minutes\n  //         //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n  //         let hello = await Pact.fetch.listen({\"listen\": tx.requestKeys[0]}, kadenaAPI.meta.host);\n  //         if (hello.result.status === \"success\"){\n  //           //set html for transaction success\n  //           txSuccess(hello.result.data, tx.requestKeys[0]);\n  //         } else {\n  //           //set html for transaction failure\n  //           txFailure(hello, tx.requestKeys[0]);\n  //         }\n  //       } catch(e){\n  //         console.log(e);\n  //         //set html for transaction listening timeout\n  //         txTimeout(tx.requestKeys[0]);\n  //       }\n  //     } catch(e){\n  //       console.log(e);\n  //       //set html for transaction construction error\n  //       txConstructionError();\n  //     }\n  // }\n  //return react JSX\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginLeft: 400,\n      marginTop: 50,\n      marginRight: 400,\n      marginBottom: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Segment, {\n    raised: true,\n    padded: \"very\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    class: \"ui header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 32\n    }\n  }, \"Welcome to the Kadena Memory Wall\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, \"Smart Contract Details:\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, \" Address: \"), \" \", kadenaAPI.contractAddress), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, \" Chain: \"), \" \", kadenaAPI.meta.chainId), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, \" Network: \"), \" \", kadenaAPI.meta.networkId), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, \"Engrave your name and submit a real transaction on the Kadena blockchain with just 1-click\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"ui input\",\n    id: \"input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    id: \"user-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"teal\",\n    size: \"big\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  }, \"Was Here\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/cpa/templates/react/src/App.js"],"names":["React","useState","useEffect","Segment","Input","Button","Pact","kadenaAPI","App","txStatus","setTxStatus","memories","setMemories","fetchMemories","getMemories","console","log","res","fetch","local","pactCode","contractAddress","meta","lang","mkMeta","sender","chainId","gasPrice","gasLimit","creationTime","ttl","host","all","result","data","sort","a","b","int","marginLeft","marginTop","marginRight","marginBottom","fontSize","networkId"],"mappings":"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","sourcesContent":["//basic React api imports\nimport React, { useState, useEffect } from 'react';\n//semantic ui for styling\nimport { Segment, Input, Button } from 'semantic-ui-react'\n//pact-lang-api for blockchain calls\nimport Pact from 'pact-lang-api';\n//config file for blockchain calls\nimport { kadenaAPI } from './kadena-config.js'\n\nconst App = () => {\n\n  /*\n\n    REACT SETUP\n\n      we will make use of standard react apis\n\n      useState -> page state management (tx status, list of existing memories)\n      useEffect -> fetch existing memories on page load\n\n  */\n\n  //keep track of the blockchain call status\n  const [txStatus, setTxStatus] = useState('none');\n  //list of all memories\n  const [memories, setMemories] = useState([]);\n\n  useEffect(() => {\n    async function fetchMemories() {\n      await getMemories();\n    }\n    fetchMemories();\n    console.log(memories)\n  }, [])\n\n\n  /*\n\n    BLOCKCHAIN TRANSACTIONS\n\n      use pact-lang-api npm package to interact with Kadena blockchain networks\n        https://github.com/kadena-io/pact-lang-api\n\n      all transaction setup is ./kadena-config.js\n\n  */\n\n  //local call\n  //  reads from blockchain previously posted memories\n  const getMemories = async () => {\n    //calling get-all() function from smart contract\n    const res = await Pact.fetch.local({\n      pactCode: `(${kadenaAPI.contractAddress}.get-all)`,\n      //pact-lang-api function to construct transaction meta data\n      meta: Pact.lang.mkMeta\n      (\n        kadenaAPI.meta.sender,\n        kadenaAPI.meta.chainId,\n        kadenaAPI.meta.gasPrice,\n        kadenaAPI.meta.gasLimit,\n        kadenaAPI.meta.creationTime(),\n        kadenaAPI.meta.ttl\n      )\n  }, kadenaAPI.meta.host)\n    const all = res.result.data\n    //sorts memories by least recent\n    all.sort((a, b) => a[\"block-height\"].int - b[\"block-height\"].int);\n    setMemories(all)\n  }\n\n\n  //send call\n  //  writes memory blockchain\n  //  updates frontend depending on response\n  //THIS IS FOR GAS STATION\n  // FOR SIGNING API COMMENT OUT THIS AND UNCOMMENT FOLLOWING FUCNTION WITH SAME NAME\n  // const postMemory = async (user) => {\n  //     try {\n  //       //generates dummy keypair\n  //       //  using gas stations means the keys do not need to have funds\n  //       const kp = Pact.crypto.genKeyPair();\n  //       //sends JSON content to blockchain\n  //       const tx = await Pact.fetch.send(\n  //       {\n  //         networkId: kadenaAPI.meta.networkId,\n  //         //calling here() function from smart contract\n  //         //  writes text from 'user' variable to the memory wall\n  //         pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n  //         keyPairs: [\n  //           {\n  //             publicKey: kp.publicKey,\n  //             secretKey: kp.secretKey,\n  //             clist: [\n  //               //capability to use gas station\n  //               {\n  //                 name: `${kadenaAPI.gasStationAddress}.GAS_PAYER`,\n  //                 //args are irrelevant here just need to be the right type\n  //                 args: [\"hi\", {int: 1}, 1.0]\n  //               }\n  //             ]\n  //           }],\n  //         //pact-lang-api function to construct transaction meta data\n  //         meta: Pact.lang.mkMeta\n  //         (\n  //           kadenaAPI.meta.sender,\n  //           kadenaAPI.meta.chainId,\n  //           kadenaAPI.meta.gasPrice,\n  //           kadenaAPI.meta.gasLimit,\n  //           kadenaAPI.meta.creationTime(),\n  //           kadenaAPI.meta.ttl\n  //         )\n  //       }, kadenaAPI.meta.host);\n  //       //set state to wait for transaction response\n  //       txPending();\n  //       try {\n  //         //listens to response to transaction sent\n  //         //  note method will timeout in two minutes\n  //         //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n  //         let hello = await Pact.fetch.listen({\"listen\": tx.requestKeys[0]}, kadenaAPI.meta.host);\n  //         if (hello.result.status === \"success\"){\n  //           //set state for transaction success\n  //           txSuccess(hello.result.data, tx.requestKeys[0]);\n  //         } else {\n  //           //set state for transaction failure\n  //           txFailure(hello, tx.requestKeys[0]);\n  //         }\n  //       } catch(e){\n  //         console.log(e);\n  //         //set state for transaction listening timeout\n  //         txTimeout(tx.requestKeys[0]);\n  //       }\n  //     } catch(e){\n  //       console.log(e);\n  //       //set state for transaction construction error\n  //       txConstructionError();\n  //     }\n  // }\n\n  // //send call\n  // //  writes memory blockchain\n  // //  updates frontend depending on response\n  // // THIS IS FOR SIGNING API CONFIG\n  // const postMemory = async (user) => {\n  //     try {\n  //       //creates transaction to send to wallet\n  //       const toSign = {\n  //           pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n  //           caps: [],\n  //           gasLimit: kadenaAPI.meta.gasLimit,\n  //           chainId: kadenaAPI.meta.chainId,\n  //           ttl: kadenaAPI.meta.ttl,\n  //           envData: {}\n  //       }\n  //       //sends transaction to wallet to sign and awaits signed transaction\n  //       const signed = await Pact.wallet.sign(toSign)\n  //       console.log(signed)\n  //       //sends signed transaction to blockchain\n  //       const tx = await Pact.wallet.sendSigned(signed, kadenaAPI.meta.host)\n  //       //set html to wait for transaction response\n  //       txPending();\n  //       try {\n  //         //listens to response to transaction sent\n  //         //  note method will timeout in two minutes\n  //         //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n  //         let hello = await Pact.fetch.listen({\"listen\": tx.requestKeys[0]}, kadenaAPI.meta.host);\n  //         if (hello.result.status === \"success\"){\n  //           //set html for transaction success\n  //           txSuccess(hello.result.data, tx.requestKeys[0]);\n  //         } else {\n  //           //set html for transaction failure\n  //           txFailure(hello, tx.requestKeys[0]);\n  //         }\n  //       } catch(e){\n  //         console.log(e);\n  //         //set html for transaction listening timeout\n  //         txTimeout(tx.requestKeys[0]);\n  //       }\n  //     } catch(e){\n  //       console.log(e);\n  //       //set html for transaction construction error\n  //       txConstructionError();\n  //     }\n  // }\n\n  //return react JSX\n  return (\n    <div style={{ marginLeft: 400, marginTop: 50, marginRight: 400, marginBottom: 50 }}>\n      <Segment\n        raised\n        padded=\"very\"\n      >\n        <h1 class=\"ui header\" ><a>Welcome to the Kadena Memory Wall</a></h1>\n\n        <h2>Smart Contract Details:</h2>\n        <p style={{ fontSize: 18 }}>\n          <b> Address: </b> {kadenaAPI.contractAddress}\n        </p>\n        <p style={{ fontSize: 18 }}>\n          <b> Chain: </b> {kadenaAPI.meta.chainId}\n        </p>\n        <p style={{ fontSize: 18 }}>\n          <b> Network: </b> {kadenaAPI.meta.networkId}\n        </p>\n\n        <h2>Engrave your name and submit a real transaction on the Kadena blockchain with just 1-click</h2>\n        <div class=\"ui input\" id=\"input\">\n          <Input type=\"text\" id=\"user-input\"/>\n          <Button\n            color=\"teal\"\n            size=\"big\"\n          >\n            Was Here\n          </Button>\n        </div>\n\n      </Segment>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}