{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/cpa/templates/react/src/App.js\";\n//basic React api imports\nimport React, { useState, useEffect } from 'react'; //semantic ui for styling\n\nimport { Segment, Input, Button, Feed, Icon } from 'semantic-ui-react'; //pact-lang-api for blockchain calls\n\nimport Pact from 'pact-lang-api'; //config file for blockchain calls\n\nimport { kadenaAPI } from './kadena-config.js';\n\nconst App = () => {\n  /*\n     REACT SETUP\n       we will make use of standard react apis\n       useState -> page state management (tx status, list of existing memories)\n      useEffect -> fetch existing memories on page load\n   */\n  //useState api\n  //  keep track of the blockchain call status\n  const [txStatus, setTxStatus] = useState('none'); //  list of all memories\n\n  const [memories, setMemories] = useState([]); //  user inputed memory\n\n  const [memory, setMemory] = useState(''); //useEffect api\n  //  fetches existing memories from blockchain at page load\n\n  useEffect(() => {\n    getMemories();\n  }, []);\n  /*\n     BLOCKCHAIN TRANSACTIONS\n       use pact-lang-api npm package to interact with Kadena blockchain networks\n        https://github.com/kadena-io/pact-lang-api\n       all transaction setup is ./kadena-config.js\n   */\n  //local call\n  //  reads from blockchain previously posted memories\n\n  const getMemories = async () => {\n    //calling get-all() function from smart contract\n    const res = await Pact.fetch.local({\n      pactCode: `(${kadenaAPI.contractAddress}.get-all)`,\n      //pact-lang-api function to construct transaction meta data\n      meta: Pact.lang.mkMeta(kadenaAPI.meta.sender, kadenaAPI.meta.chainId, kadenaAPI.meta.gasPrice, kadenaAPI.meta.gasLimit, kadenaAPI.meta.creationTime(), kadenaAPI.meta.ttl)\n    }, kadenaAPI.meta.host);\n    const all = res.result.data; //sorts memories by least recent\n\n    all.sort((a, b) => a[\"block-height\"].int - b[\"block-height\"].int);\n    console.log(all);\n    setMemories(all);\n  }; //send call\n  //  writes memory blockchain\n  //  updates frontend depending on response\n  //THIS IS FOR GAS STATION\n  // FOR SIGNING API COMMENT OUT THIS AND UNCOMMENT FOLLOWING FUCNTION WITH SAME NAME\n  // const postMemory = async (user) => {\n  //     try {\n  //       //generates dummy keypair\n  //       //  using gas stations means the keys do not need to have funds\n  //       const kp = Pact.crypto.genKeyPair();\n  //       //sends JSON content to blockchain\n  //       const tx = await Pact.fetch.send(\n  //       {\n  //         networkId: kadenaAPI.meta.networkId,\n  //         //calling here() function from smart contract\n  //         //  writes text from 'user' variable to the memory wall\n  //         pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n  //         keyPairs: [\n  //           {\n  //             publicKey: kp.publicKey,\n  //             secretKey: kp.secretKey,\n  //             clist: [\n  //               //capability to use gas station\n  //               {\n  //                 name: `${kadenaAPI.gasStationAddress}.GAS_PAYER`,\n  //                 //args are irrelevant here just need to be the right type\n  //                 args: [\"hi\", {int: 1}, 1.0]\n  //               }\n  //             ]\n  //           }],\n  //         //pact-lang-api function to construct transaction meta data\n  //         meta: Pact.lang.mkMeta\n  //         (\n  //           kadenaAPI.meta.sender,\n  //           kadenaAPI.meta.chainId,\n  //           kadenaAPI.meta.gasPrice,\n  //           kadenaAPI.meta.gasLimit,\n  //           kadenaAPI.meta.creationTime(),\n  //           kadenaAPI.meta.ttl\n  //         )\n  //       }, kadenaAPI.meta.host);\n  //       //set state to wait for transaction response\n  //       txPending();\n  //       try {\n  //         //listens to response to transaction sent\n  //         //  note method will timeout in two minutes\n  //         //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n  //         let hello = await Pact.fetch.listen({\"listen\": tx.requestKeys[0]}, kadenaAPI.meta.host);\n  //         if (hello.result.status === \"success\"){\n  //           //set state for transaction success\n  //           txSuccess(hello.result.data, tx.requestKeys[0]);\n  //         } else {\n  //           //set state for transaction failure\n  //           txFailure(hello, tx.requestKeys[0]);\n  //         }\n  //       } catch(e){\n  //         console.log(e);\n  //         //set state for transaction listening timeout\n  //         txTimeout(tx.requestKeys[0]);\n  //       }\n  //     } catch(e){\n  //       console.log(e);\n  //       //set state for transaction construction error\n  //       txConstructionError();\n  //     }\n  // }\n  // //send call\n  // //  writes memory blockchain\n  // //  updates frontend depending on response\n  // // THIS IS FOR SIGNING API CONFIG\n  // const postMemory = async (user) => {\n  //     try {\n  //       //creates transaction to send to wallet\n  //       const toSign = {\n  //           pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n  //           caps: [],\n  //           gasLimit: kadenaAPI.meta.gasLimit,\n  //           chainId: kadenaAPI.meta.chainId,\n  //           ttl: kadenaAPI.meta.ttl,\n  //           envData: {}\n  //       }\n  //       //sends transaction to wallet to sign and awaits signed transaction\n  //       const signed = await Pact.wallet.sign(toSign)\n  //       console.log(signed)\n  //       //sends signed transaction to blockchain\n  //       const tx = await Pact.wallet.sendSigned(signed, kadenaAPI.meta.host)\n  //       //set html to wait for transaction response\n  //       txPending();\n  //       try {\n  //         //listens to response to transaction sent\n  //         //  note method will timeout in two minutes\n  //         //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n  //         let hello = await Pact.fetch.listen({\"listen\": tx.requestKeys[0]}, kadenaAPI.meta.host);\n  //         if (hello.result.status === \"success\"){\n  //           //set html for transaction success\n  //           txSuccess(hello.result.data, tx.requestKeys[0]);\n  //         } else {\n  //           //set html for transaction failure\n  //           txFailure(hello, tx.requestKeys[0]);\n  //         }\n  //       } catch(e){\n  //         console.log(e);\n  //         //set html for transaction listening timeout\n  //         txTimeout(tx.requestKeys[0]);\n  //       }\n  //     } catch(e){\n  //       console.log(e);\n  //       //set html for transaction construction error\n  //       txConstructionError();\n  //     }\n  // }\n  //return react JSX\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginLeft: 400,\n      marginTop: 80,\n      marginRight: 400,\n      marginBottom: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Segment, {\n    raised: true,\n    padded: \"very\",\n    style: {\n      margin: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    class: \"ui header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 32\n    }\n  }, \"Welcome to the Kadena Memory Wall\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, \"Smart Contract Details:\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, \" Address: \"), \" \", kadenaAPI.contractAddress), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, \" Chain: \"), \" \", kadenaAPI.meta.chainId), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, \" Network: \"), \" \", kadenaAPI.meta.networkId), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, \"Engrave your name and submit a real transaction on the Kadena blockchain with just 1-click\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"ui input\",\n    id: \"input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"your name or memory\",\n    value: memory,\n    onChange: e => setMemory(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"teal\",\n    size: \"huge\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, \"Was Here\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Feed, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 11\n    }\n  }, memories.map((m, i) => {\n    let colors = [\"orange\", \"yellow\", \"olive\", \"green\", \"teal\", \"blue\", \"violet\", \"purple\", \"pink\", \"brown\", \"grey\"];\n    return /*#__PURE__*/React.createElement(Feed.Event, {\n      style: {\n        marginBottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Feed.Label, {\n      style: {\n        marginRight: 10\n      },\n      icon: /*#__PURE__*/React.createElement(Icon, {\n        name: \"like\",\n        color: colors[Math.floor(Math.random() * colors.length)],\n        size: \"massive\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Feed.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontSize: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 26\n      }\n    }, m.name), \" was here\"))));\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/cpa/templates/react/src/App.js"],"names":["React","useState","useEffect","Segment","Input","Button","Feed","Icon","Pact","kadenaAPI","App","txStatus","setTxStatus","memories","setMemories","memory","setMemory","getMemories","res","fetch","local","pactCode","contractAddress","meta","lang","mkMeta","sender","chainId","gasPrice","gasLimit","creationTime","ttl","host","all","result","data","sort","a","b","int","console","log","marginLeft","marginTop","marginRight","marginBottom","margin","fontSize","networkId","e","target","value","map","m","i","colors","Math","floor","random","length","name"],"mappings":"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","sourcesContent":["//basic React api imports\nimport React, { useState, useEffect } from 'react';\n//semantic ui for styling\nimport { Segment, Input, Button, Feed, Icon } from 'semantic-ui-react'\n//pact-lang-api for blockchain calls\nimport Pact from 'pact-lang-api';\n//config file for blockchain calls\nimport { kadenaAPI } from './kadena-config.js'\n\nconst App = () => {\n\n  /*\n\n    REACT SETUP\n\n      we will make use of standard react apis\n\n      useState -> page state management (tx status, list of existing memories)\n      useEffect -> fetch existing memories on page load\n\n  */\n\n  //useState api\n  //  keep track of the blockchain call status\n  const [txStatus, setTxStatus] = useState('none');\n  //  list of all memories\n  const [memories, setMemories] = useState([]);\n  //  user inputed memory\n  const [memory, setMemory] = useState('')\n\n  //useEffect api\n  //  fetches existing memories from blockchain at page load\n  useEffect(() => {\n    getMemories();\n  }, [])\n\n\n  /*\n\n    BLOCKCHAIN TRANSACTIONS\n\n      use pact-lang-api npm package to interact with Kadena blockchain networks\n        https://github.com/kadena-io/pact-lang-api\n\n      all transaction setup is ./kadena-config.js\n\n  */\n\n  //local call\n  //  reads from blockchain previously posted memories\n  const getMemories = async () => {\n    //calling get-all() function from smart contract\n    const res = await Pact.fetch.local({\n      pactCode: `(${kadenaAPI.contractAddress}.get-all)`,\n      //pact-lang-api function to construct transaction meta data\n      meta: Pact.lang.mkMeta\n      (\n        kadenaAPI.meta.sender,\n        kadenaAPI.meta.chainId,\n        kadenaAPI.meta.gasPrice,\n        kadenaAPI.meta.gasLimit,\n        kadenaAPI.meta.creationTime(),\n        kadenaAPI.meta.ttl\n      )\n  }, kadenaAPI.meta.host)\n    const all = res.result.data\n    //sorts memories by least recent\n    all.sort((a, b) => a[\"block-height\"].int - b[\"block-height\"].int);\n    console.log(all)\n    setMemories(all)\n  }\n\n\n  //send call\n  //  writes memory blockchain\n  //  updates frontend depending on response\n  //THIS IS FOR GAS STATION\n  // FOR SIGNING API COMMENT OUT THIS AND UNCOMMENT FOLLOWING FUCNTION WITH SAME NAME\n  // const postMemory = async (user) => {\n  //     try {\n  //       //generates dummy keypair\n  //       //  using gas stations means the keys do not need to have funds\n  //       const kp = Pact.crypto.genKeyPair();\n  //       //sends JSON content to blockchain\n  //       const tx = await Pact.fetch.send(\n  //       {\n  //         networkId: kadenaAPI.meta.networkId,\n  //         //calling here() function from smart contract\n  //         //  writes text from 'user' variable to the memory wall\n  //         pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n  //         keyPairs: [\n  //           {\n  //             publicKey: kp.publicKey,\n  //             secretKey: kp.secretKey,\n  //             clist: [\n  //               //capability to use gas station\n  //               {\n  //                 name: `${kadenaAPI.gasStationAddress}.GAS_PAYER`,\n  //                 //args are irrelevant here just need to be the right type\n  //                 args: [\"hi\", {int: 1}, 1.0]\n  //               }\n  //             ]\n  //           }],\n  //         //pact-lang-api function to construct transaction meta data\n  //         meta: Pact.lang.mkMeta\n  //         (\n  //           kadenaAPI.meta.sender,\n  //           kadenaAPI.meta.chainId,\n  //           kadenaAPI.meta.gasPrice,\n  //           kadenaAPI.meta.gasLimit,\n  //           kadenaAPI.meta.creationTime(),\n  //           kadenaAPI.meta.ttl\n  //         )\n  //       }, kadenaAPI.meta.host);\n  //       //set state to wait for transaction response\n  //       txPending();\n  //       try {\n  //         //listens to response to transaction sent\n  //         //  note method will timeout in two minutes\n  //         //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n  //         let hello = await Pact.fetch.listen({\"listen\": tx.requestKeys[0]}, kadenaAPI.meta.host);\n  //         if (hello.result.status === \"success\"){\n  //           //set state for transaction success\n  //           txSuccess(hello.result.data, tx.requestKeys[0]);\n  //         } else {\n  //           //set state for transaction failure\n  //           txFailure(hello, tx.requestKeys[0]);\n  //         }\n  //       } catch(e){\n  //         console.log(e);\n  //         //set state for transaction listening timeout\n  //         txTimeout(tx.requestKeys[0]);\n  //       }\n  //     } catch(e){\n  //       console.log(e);\n  //       //set state for transaction construction error\n  //       txConstructionError();\n  //     }\n  // }\n\n  // //send call\n  // //  writes memory blockchain\n  // //  updates frontend depending on response\n  // // THIS IS FOR SIGNING API CONFIG\n  // const postMemory = async (user) => {\n  //     try {\n  //       //creates transaction to send to wallet\n  //       const toSign = {\n  //           pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n  //           caps: [],\n  //           gasLimit: kadenaAPI.meta.gasLimit,\n  //           chainId: kadenaAPI.meta.chainId,\n  //           ttl: kadenaAPI.meta.ttl,\n  //           envData: {}\n  //       }\n  //       //sends transaction to wallet to sign and awaits signed transaction\n  //       const signed = await Pact.wallet.sign(toSign)\n  //       console.log(signed)\n  //       //sends signed transaction to blockchain\n  //       const tx = await Pact.wallet.sendSigned(signed, kadenaAPI.meta.host)\n  //       //set html to wait for transaction response\n  //       txPending();\n  //       try {\n  //         //listens to response to transaction sent\n  //         //  note method will timeout in two minutes\n  //         //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n  //         let hello = await Pact.fetch.listen({\"listen\": tx.requestKeys[0]}, kadenaAPI.meta.host);\n  //         if (hello.result.status === \"success\"){\n  //           //set html for transaction success\n  //           txSuccess(hello.result.data, tx.requestKeys[0]);\n  //         } else {\n  //           //set html for transaction failure\n  //           txFailure(hello, tx.requestKeys[0]);\n  //         }\n  //       } catch(e){\n  //         console.log(e);\n  //         //set html for transaction listening timeout\n  //         txTimeout(tx.requestKeys[0]);\n  //       }\n  //     } catch(e){\n  //       console.log(e);\n  //       //set html for transaction construction error\n  //       txConstructionError();\n  //     }\n  // }\n\n  //return react JSX\n  return (\n    <div style={{ marginLeft: 400, marginTop: 80, marginRight: 400, marginBottom: 50 }}>\n      <Segment\n        raised\n        padded=\"very\"\n        style={{ margin: 500 }}\n      >\n        <h1 class=\"ui header\" ><a>Welcome to the Kadena Memory Wall</a></h1>\n\n        <h2>Smart Contract Details:</h2>\n        <p style={{ fontSize: 18 }}>\n          <b> Address: </b> {kadenaAPI.contractAddress}\n        </p>\n        <p style={{ fontSize: 18 }}>\n          <b> Chain: </b> {kadenaAPI.meta.chainId}\n        </p>\n        <p style={{ fontSize: 18 }}>\n          <b> Network: </b> {kadenaAPI.meta.networkId}\n        </p>\n\n        <h2>Engrave your name and submit a real transaction on the Kadena blockchain with just 1-click</h2>\n        <div class=\"ui input\" id=\"input\">\n          <Input\n            placeholder='your name or memory'\n            value={memory}\n            onChange={(e) => setMemory(e.target.value)}\n          />\n          <Button\n            color=\"teal\"\n            size=\"huge\"\n          >\n            Was Here\n          </Button>\n        </div>\n        <div style={{ marginTop: 40 }}>\n          <Feed>\n            {memories.map((m, i) => {\n              let colors = [\"orange\", \"yellow\", \"olive\", \"green\", \"teal\", \"blue\", \"violet\", \"purple\", \"pink\", \"brown\", \"grey\"];\n              return(\n                <Feed.Event style={{ marginBottom: 20 }}>\n\n                  <Feed.Label\n                    style={{ marginRight: 10 }}\n                    icon={\n                      <Icon\n                        name=\"like\"\n                        color={colors[Math.floor(Math.random()*colors.length)]}\n                        size={\"massive\"}\n                      />\n                    }\n                  />\n                  <Feed.Content>\n                    <div style={{ fontSize: 20 }}>\n                      <b><a>{m.name}</a> was here</b>\n                    </div>\n                  </Feed.Content>\n                </Feed.Event>\n              );\n            })}\n          </Feed>\n        </div>\n      </Segment>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}