{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/cpa/templates/react/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Segment, Input, Button } from 'semantic-ui-react';\nimport { kadenaAPI } from './kadena-config.js';\n\nconst App = () => {\n  /*\n     REACT SETUP\n       we will make use of standard react apis\n       useState -> page state management (tx status, list of existing memories)\n      useEffect -> fetch existing memories on page load\n   */\n  //keep track of the blockchain call status\n  const [txStatus, setTxStatus] = useState('none'); //list of all memories\n\n  const [memories, setMemories] = useState([]);\n  useEffect(() => {\n    async function fetchMemories() {\n      await getMemories;\n    }\n\n    pactFetch();\n  }, []);\n  /*\n     BLOCKCHAIN TRANSACTIONS\n       use pact-lang-api npm package to interact with Kadena blockchain networks\n        https://github.com/kadena-io/pact-lang-api\n       all transaction setup is in previous section\n   */\n  //local call\n  //  reads from blockchain previously posted memories\n\n  const getMemories = async host => {\n    //calling get-all() function from smart contract\n    const res = await Pact.fetch.local({\n      pactCode: `(${kadenaAPI.contractAddress}.get-all)`,\n      //pact-lang-api function to construct transaction meta data\n      meta: Pact.lang.mkMeta(kadenaAPI.meta.sender, kadenaAPI.meta.chainId, kadenaAPI.meta.gasPrice, kadenaAPI.meta.gasLimit, kadenaAPI.meta.creationTime(), kadenaAPI.meta.ttl)\n    }, host);\n    const all = res.result.data; //sorts memories by least recent\n\n    all.sort((a, b) => a[\"block-height\"].int - b[\"block-height\"].int);\n    return all;\n  }; //send call\n  //  writes memory blockchain\n  //  updates frontend depending on response\n  //THIS IS FOR GAS STATION\n  // FOR SIGNING API COMMENT OUT THIS AND UNCOMMENT FOLLOWING FUCNTION WITH SAME NAME\n\n\n  const postMemory = async user => {\n    try {\n      //generates dummy keypair\n      //  using gas stations means the keys do not need to have funds\n      const kp = Pact.crypto.genKeyPair(); //sends JSON content to blockchain\n\n      const tx = await Pact.fetch.send({\n        networkId: kadenaAPI.meta.networkId,\n        //calling here() function from smart contract\n        //  writes text from 'user' variable to the memory wall\n        pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n        keyPairs: [{\n          publicKey: kp.publicKey,\n          secretKey: kp.secretKey,\n          clist: [//capability to use gas station\n          {\n            name: `${kadenaAPI.gasStationAddress}.GAS_PAYER`,\n            //args are irrelevant here just need to be the right type\n            args: [\"hi\", {\n              int: 1\n            }, 1.0]\n          }]\n        }],\n        //pact-lang-api function to construct transaction meta data\n        meta: Pact.lang.mkMeta(kadenaAPI.meta.sender, kadenaAPI.meta.chainId, kadenaAPI.meta.gasPrice, kadenaAPI.meta.gasLimit, kadenaAPI.meta.creationTime(), kadenaAPI.meta.ttl)\n      }, kadenaAPI.meta.host); //set state to wait for transaction response\n\n      txPending();\n\n      try {\n        //listens to response to transaction sent\n        //  note method will timeout in two minutes\n        //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n        let hello = await Pact.fetch.listen({\n          \"listen\": tx.requestKeys[0]\n        }, kadenaAPI.meta.host);\n\n        if (hello.result.status === \"success\") {\n          //set state for transaction success\n          txSuccess(hello.result.data, tx.requestKeys[0]);\n        } else {\n          //set state for transaction failure\n          txFailure(hello, tx.requestKeys[0]);\n        }\n      } catch (e) {\n        console.log(e); //set state for transaction listening timeout\n\n        txTimeout(tx.requestKeys[0]);\n      }\n    } catch (e) {\n      console.log(e); //set state for transaction construction error\n\n      txConstructionError();\n    }\n  }; // //send call\n  // //  writes memory blockchain\n  // //  updates frontend depending on response\n  // // THIS IS FOR SIGNING API CONFIG\n  // const postMemory = async (user) => {\n  //     try {\n  //       //creates transaction to send to wallet\n  //       const toSign = {\n  //           pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n  //           caps: [],\n  //           gasLimit: kadenaAPI.meta.gasLimit,\n  //           chainId: kadenaAPI.meta.chainId,\n  //           ttl: kadenaAPI.meta.ttl,\n  //           envData: {}\n  //       }\n  //       //sends transaction to wallet to sign and awaits signed transaction\n  //       const signed = await Pact.wallet.sign(toSign)\n  //       console.log(signed)\n  //       //sends signed transaction to blockchain\n  //       const tx = await Pact.wallet.sendSigned(signed, kadenaAPI.meta.host)\n  //       //set html to wait for transaction response\n  //       txPending();\n  //       try {\n  //         //listens to response to transaction sent\n  //         //  note method will timeout in two minutes\n  //         //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n  //         let hello = await Pact.fetch.listen({\"listen\": tx.requestKeys[0]}, kadenaAPI.meta.host);\n  //         if (hello.result.status === \"success\"){\n  //           //set html for transaction success\n  //           txSuccess(hello.result.data, tx.requestKeys[0]);\n  //         } else {\n  //           //set html for transaction failure\n  //           txFailure(hello, tx.requestKeys[0]);\n  //         }\n  //       } catch(e){\n  //         console.log(e);\n  //         //set html for transaction listening timeout\n  //         txTimeout(tx.requestKeys[0]);\n  //       }\n  //     } catch(e){\n  //       console.log(e);\n  //       //set html for transaction construction error\n  //       txConstructionError();\n  //     }\n  // }\n  //return react JSX\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginLeft: 400,\n      marginTop: 50,\n      marginRight: 400,\n      marginBottom: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Segment, {\n    raised: true,\n    padded: \"very\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    class: \"ui header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 32\n    }\n  }, \"Welcome to the Kadena Memory Wall\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, \"Smart Contract Details:\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, \" Address: \"), \" \", kadenaAPI.contractAddress), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, \" Chain: \"), \" \", kadenaAPI.meta.chainId), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, \" Network: \"), \" \", kadenaAPI.meta.networkId), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, \"Engrave your name and submit a real transaction on the Kadena blockchain with just 1-click\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"ui input\",\n    id: \"input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    id: \"user-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"teal\",\n    size: \"big\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, \"Was Here\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/cpa/templates/react/src/App.js"],"names":["React","useState","useEffect","Segment","Input","Button","kadenaAPI","App","txStatus","setTxStatus","memories","setMemories","fetchMemories","getMemories","pactFetch","host","res","Pact","fetch","local","pactCode","contractAddress","meta","lang","mkMeta","sender","chainId","gasPrice","gasLimit","creationTime","ttl","all","result","data","sort","a","b","int","postMemory","user","kp","crypto","genKeyPair","tx","send","networkId","JSON","stringify","keyPairs","publicKey","secretKey","clist","name","gasStationAddress","args","txPending","hello","listen","requestKeys","status","txSuccess","txFailure","e","console","log","txTimeout","txConstructionError","marginLeft","marginTop","marginRight","marginBottom","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Segment, Input, Button } from 'semantic-ui-react'\nimport { kadenaAPI } from './kadena-config.js'\n\nconst App = () => {\n\n  /*\n\n    REACT SETUP\n\n      we will make use of standard react apis\n\n      useState -> page state management (tx status, list of existing memories)\n      useEffect -> fetch existing memories on page load\n\n  */\n\n  //keep track of the blockchain call status\n  const [txStatus, setTxStatus] = useState('none');\n  //list of all memories\n  const [memories, setMemories] = useState([]);\n\n  useEffect(() => {\n    async function fetchMemories() {\n      await getMemories;\n    }\n    pactFetch();\n  }, [])\n\n\n  /*\n\n    BLOCKCHAIN TRANSACTIONS\n\n      use pact-lang-api npm package to interact with Kadena blockchain networks\n        https://github.com/kadena-io/pact-lang-api\n\n      all transaction setup is in previous section\n\n  */\n\n  //local call\n  //  reads from blockchain previously posted memories\n  const getMemories = async (host) => {\n    //calling get-all() function from smart contract\n    const res = await Pact.fetch.local({\n      pactCode: `(${kadenaAPI.contractAddress}.get-all)`,\n      //pact-lang-api function to construct transaction meta data\n      meta: Pact.lang.mkMeta\n      (\n        kadenaAPI.meta.sender,\n        kadenaAPI.meta.chainId,\n        kadenaAPI.meta.gasPrice,\n        kadenaAPI.meta.gasLimit,\n        kadenaAPI.meta.creationTime(),\n        kadenaAPI.meta.ttl\n      )\n  }, host)\n    const all = res.result.data\n    //sorts memories by least recent\n    all.sort((a, b) => a[\"block-height\"].int - b[\"block-height\"].int);\n    return all\n  }\n\n\n  //send call\n  //  writes memory blockchain\n  //  updates frontend depending on response\n  //THIS IS FOR GAS STATION\n  // FOR SIGNING API COMMENT OUT THIS AND UNCOMMENT FOLLOWING FUCNTION WITH SAME NAME\n  const postMemory = async (user) => {\n      try {\n        //generates dummy keypair\n        //  using gas stations means the keys do not need to have funds\n        const kp = Pact.crypto.genKeyPair();\n        //sends JSON content to blockchain\n        const tx = await Pact.fetch.send(\n        {\n          networkId: kadenaAPI.meta.networkId,\n          //calling here() function from smart contract\n          //  writes text from 'user' variable to the memory wall\n          pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n          keyPairs: [\n            {\n              publicKey: kp.publicKey,\n              secretKey: kp.secretKey,\n              clist: [\n                //capability to use gas station\n                {\n                  name: `${kadenaAPI.gasStationAddress}.GAS_PAYER`,\n                  //args are irrelevant here just need to be the right type\n                  args: [\"hi\", {int: 1}, 1.0]\n                }\n              ]\n            }],\n          //pact-lang-api function to construct transaction meta data\n          meta: Pact.lang.mkMeta\n          (\n            kadenaAPI.meta.sender,\n            kadenaAPI.meta.chainId,\n            kadenaAPI.meta.gasPrice,\n            kadenaAPI.meta.gasLimit,\n            kadenaAPI.meta.creationTime(),\n            kadenaAPI.meta.ttl\n          )\n        }, kadenaAPI.meta.host);\n        //set state to wait for transaction response\n        txPending();\n        try {\n          //listens to response to transaction sent\n          //  note method will timeout in two minutes\n          //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n          let hello = await Pact.fetch.listen({\"listen\": tx.requestKeys[0]}, kadenaAPI.meta.host);\n          if (hello.result.status === \"success\"){\n            //set state for transaction success\n            txSuccess(hello.result.data, tx.requestKeys[0]);\n          } else {\n            //set state for transaction failure\n            txFailure(hello, tx.requestKeys[0]);\n          }\n        } catch(e){\n          console.log(e);\n          //set state for transaction listening timeout\n          txTimeout(tx.requestKeys[0]);\n        }\n      } catch(e){\n        console.log(e);\n        //set state for transaction construction error\n        txConstructionError();\n      }\n  }\n\n  // //send call\n  // //  writes memory blockchain\n  // //  updates frontend depending on response\n  // // THIS IS FOR SIGNING API CONFIG\n  // const postMemory = async (user) => {\n  //     try {\n  //       //creates transaction to send to wallet\n  //       const toSign = {\n  //           pactCode: `(${kadenaAPI.contractAddress}.here ${JSON.stringify(user)})`,\n  //           caps: [],\n  //           gasLimit: kadenaAPI.meta.gasLimit,\n  //           chainId: kadenaAPI.meta.chainId,\n  //           ttl: kadenaAPI.meta.ttl,\n  //           envData: {}\n  //       }\n  //       //sends transaction to wallet to sign and awaits signed transaction\n  //       const signed = await Pact.wallet.sign(toSign)\n  //       console.log(signed)\n  //       //sends signed transaction to blockchain\n  //       const tx = await Pact.wallet.sendSigned(signed, kadenaAPI.meta.host)\n  //       //set html to wait for transaction response\n  //       txPending();\n  //       try {\n  //         //listens to response to transaction sent\n  //         //  note method will timeout in two minutes\n  //         //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n  //         let hello = await Pact.fetch.listen({\"listen\": tx.requestKeys[0]}, kadenaAPI.meta.host);\n  //         if (hello.result.status === \"success\"){\n  //           //set html for transaction success\n  //           txSuccess(hello.result.data, tx.requestKeys[0]);\n  //         } else {\n  //           //set html for transaction failure\n  //           txFailure(hello, tx.requestKeys[0]);\n  //         }\n  //       } catch(e){\n  //         console.log(e);\n  //         //set html for transaction listening timeout\n  //         txTimeout(tx.requestKeys[0]);\n  //       }\n  //     } catch(e){\n  //       console.log(e);\n  //       //set html for transaction construction error\n  //       txConstructionError();\n  //     }\n  // }\n\n  //return react JSX\n  return (\n    <div style={{ marginLeft: 400, marginTop: 50, marginRight: 400, marginBottom: 50 }}>\n      <Segment\n        raised\n        padded=\"very\"\n      >\n        <h1 class=\"ui header\" ><a>Welcome to the Kadena Memory Wall</a></h1>\n\n        <h2>Smart Contract Details:</h2>\n        <p style={{ fontSize: 18 }}>\n          <b> Address: </b> {kadenaAPI.contractAddress}\n        </p>\n        <p style={{ fontSize: 18 }}>\n          <b> Chain: </b> {kadenaAPI.meta.chainId}\n        </p>\n        <p style={{ fontSize: 18 }}>\n          <b> Network: </b> {kadenaAPI.meta.networkId}\n        </p>\n\n        <h2>Engrave your name and submit a real transaction on the Kadena blockchain with just 1-click</h2>\n        <div class=\"ui input\" id=\"input\">\n          <Input type=\"text\" id=\"user-input\"/>\n          <Button\n            color=\"teal\"\n            size=\"big\"\n          >\n            Was Here\n          </Button>\n        </div>\n\n      </Segment>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}