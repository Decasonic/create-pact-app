{"ast":null,"code":"/*\n\nBLOCKCHAIN CONFIGURATION FILE\n\n  initalize all data for pact-lang-api kadena blockchain calls\n\n  modify this file to interact with different\n    chains, networks, contracts\n\n  documentation:\n    https://pact-language.readthedocs.io/en/stable/\n\n  pact tutorials:\n    https://pactlang.org/\n\n*/\n//chain that contract lives on\n//CHAINID -> selected string 0-19\nvar chainId = \"0\"; //id of network version\n//TESTNET -> \"testnet04\"\n\nvar networkId = \"mainnet01\"; //network node\n//TESTNET -> \"us1.testnet\"\n\nvar node = \"us-e1\"; //unique contract name\n//DEPLOY OWN -> \"memory-wall-hash(currentTime + projectName)\"\n\nvar contractName = \"memory-wall\"; //unique gas station contract name\n//DEPLOY OWN -> \"memory-wall-gas-station-hash(currentTime + projectName)\"\n\nvar gasStationName = \"memory-wall-gas-station\"; //namespace that precedes contract name\n\nvar namespace = \"free\"; //api host to send requests\n\nvar host = `https://${node}.chainweb.com/chainweb/0.0/${networkId}/chain/${chainId}/pact`; //creation time for request\n\nvar creationTime = () => Math.round(new Date().getTime() / 1000) - 15; //JSON with all necessary blockchain call data\n\n\nvar kadenaAPI = {\n  contractName: contractName,\n  gasStationName: gasStationName,\n  namespace: namespace,\n  contractAddress: `${namespace}.${contractName}`,\n  gasStationAddress: `${namespace}.${gasStationName}`,\n  explorerURL: `https://explorer.chainweb.com/${networkId.slice(0, -2)}`,\n  meta: {\n    networkId: networkId,\n    chainId: chainId,\n    host: host,\n    creationTime: creationTime,\n    //gas price at lowest possible denomination\n    gasPrice: 0.00000000001,\n    //high gas limit for tx\n    gasLimit: 10000,\n    //time a tx lives in mempool since creationTime\n    ttl: 28800,\n    //sender === gas payer of the transaction\n    //  set to our gas station account defined in memory-wall-gas-station.pact\n    sender: \"mw-free-gas\",\n    //nonce here doesnt matter since the tx will never have the same hash\n    nonce: \"some nonce that doesnt matter\"\n  }\n};\nmodule.exports = {\n  kadenaAPI: kadenaAPI\n};","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/cpa/templates/react/src/kadena-config.js"],"names":["chainId","networkId","node","contractName","gasStationName","namespace","host","creationTime","Math","round","Date","getTime","kadenaAPI","contractAddress","gasStationAddress","explorerURL","slice","meta","gasPrice","gasLimit","ttl","sender","nonce","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;AACA;AACA,IAAIA,OAAO,GAAG,GAAd,C,CAEA;AACA;;AACA,IAAIC,SAAS,GAAG,WAAhB,C,CAEA;AACA;;AACA,IAAIC,IAAI,GAAG,OAAX,C,CAEA;AACA;;AACA,IAAIC,YAAY,GAAG,aAAnB,C,CAEA;AACA;;AACA,IAAIC,cAAc,GAAG,yBAArB,C,CAEA;;AACA,IAAIC,SAAS,GAAG,MAAhB,C,CAEA;;AACA,IAAIC,IAAI,GAAI,WAAUJ,IAAK,8BAA6BD,SAAU,UAASD,OAAQ,OAAnF,C,CAEA;;AACA,IAAIO,YAAY,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAY,IAAIC,IAAJ,EAAD,CAAWC,OAAX,KAAqB,IAAhC,IAAsC,EAA/D,C,CAEA;;;AACA,IAAIC,SAAS,GAAG;AACdT,EAAAA,YAAY,EAAEA,YADA;AAEdC,EAAAA,cAAc,EAAEA,cAFF;AAGdC,EAAAA,SAAS,EAAEA,SAHG;AAIdQ,EAAAA,eAAe,EAAG,GAAER,SAAU,IAAGF,YAAa,EAJhC;AAKdW,EAAAA,iBAAiB,EAAG,GAAET,SAAU,IAAGD,cAAe,EALpC;AAMdW,EAAAA,WAAW,EAAG,iCAAgCd,SAAS,CAACe,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAuB,EANvD;AAOdC,EAAAA,IAAI,EAAE;AACFhB,IAAAA,SAAS,EAAEA,SADT;AAEFD,IAAAA,OAAO,EAAEA,OAFP;AAGFM,IAAAA,IAAI,EAAEA,IAHJ;AAIFC,IAAAA,YAAY,EAAEA,YAJZ;AAKF;AACAW,IAAAA,QAAQ,EAAE,aANR;AAOF;AACAC,IAAAA,QAAQ,EAAE,KARR;AASF;AACAC,IAAAA,GAAG,EAAE,KAVH;AAWF;AACA;AACAC,IAAAA,MAAM,EAAE,aAbN;AAcF;AACAC,IAAAA,KAAK,EAAE;AAfL;AAPQ,CAAhB;AA0BAC,MAAM,CAACC,OAAP,GAAiB;AACfZ,EAAAA,SAAS,EAAEA;AADI,CAAjB","sourcesContent":["/*\n\nBLOCKCHAIN CONFIGURATION FILE\n\n  initalize all data for pact-lang-api kadena blockchain calls\n\n  modify this file to interact with different\n    chains, networks, contracts\n\n  documentation:\n    https://pact-language.readthedocs.io/en/stable/\n\n  pact tutorials:\n    https://pactlang.org/\n\n*/\n\n//chain that contract lives on\n//CHAINID -> selected string 0-19\nvar chainId = \"0\"\n\n//id of network version\n//TESTNET -> \"testnet04\"\nvar networkId = \"mainnet01\"\n\n//network node\n//TESTNET -> \"us1.testnet\"\nvar node = \"us-e1\"\n\n//unique contract name\n//DEPLOY OWN -> \"memory-wall-hash(currentTime + projectName)\"\nvar contractName = \"memory-wall\"\n\n//unique gas station contract name\n//DEPLOY OWN -> \"memory-wall-gas-station-hash(currentTime + projectName)\"\nvar gasStationName = \"memory-wall-gas-station\"\n\n//namespace that precedes contract name\nvar namespace = \"free\"\n\n//api host to send requests\nvar host = `https://${node}.chainweb.com/chainweb/0.0/${networkId}/chain/${chainId}/pact`\n\n//creation time for request\nvar creationTime = () => Math.round((new Date).getTime()/1000)-15\n\n//JSON with all necessary blockchain call data\nvar kadenaAPI = {\n  contractName: contractName,\n  gasStationName: gasStationName,\n  namespace: namespace,\n  contractAddress: `${namespace}.${contractName}`,\n  gasStationAddress: `${namespace}.${gasStationName}`,\n  explorerURL: `https://explorer.chainweb.com/${networkId.slice(0, -2)}`,\n  meta: {\n      networkId: networkId,\n      chainId: chainId,\n      host: host,\n      creationTime: creationTime,\n      //gas price at lowest possible denomination\n      gasPrice: 0.00000000001,\n      //high gas limit for tx\n      gasLimit: 10000,\n      //time a tx lives in mempool since creationTime\n      ttl: 28800,\n      //sender === gas payer of the transaction\n      //  set to our gas station account defined in memory-wall-gas-station.pact\n      sender: \"mw-free-gas\",\n      //nonce here doesnt matter since the tx will never have the same hash\n      nonce: \"some nonce that doesnt matter\",\n  }\n}\n\nmodule.exports = {\n  kadenaAPI: kadenaAPI\n}\n"]},"metadata":{},"sourceType":"module"}